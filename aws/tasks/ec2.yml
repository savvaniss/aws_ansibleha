---


 - name: VCP | debug info
   debug:
     var: "web_security_rules"

 - name: WebServer | Create WEB Security Group
   ec2_group:
     name: "{{  web_security_groups[0].sg_name }}"
     description: "{{ web_security_groups[0].sg_description }}"
     region: "{{ vpc_region }}" # Change the AWS region here
     vpc_id: "{{ vpc.vpc.id }}" # vpc is the resgister name, you can also set it manually
     state: present
     rules:
        - proto: "{{ web_security_rules.rule1.proto }}"
          from_port: "{{ web_security_rules.rule1.from_port }}"
          to_port: "{{ web_security_rules.rule1.to_port }}"
          cidr_ip: "{{ web_security_rules.rule1.cidr_ip }}"
        - proto: "{{ web_security_rules.rule2.proto }}"
          from_port: "{{ web_security_rules.rule2.from_port }}"
          to_port: "{{ web_security_rules.rule2.to_port }}"
          cidr_ip: "{{ web_security_rules.rule2.cidr_ip }}"
        - proto: "{{ web_security_rules.rule3.proto }}"
          from_port: "{{ web_security_rules.rule3.from_port }}"
          to_port: "{{ web_security_rules.rule3.to_port }}"
          cidr_ip: "{{ web_security_rules.rule3.cidr_ip }}"
   register: web_sg

 - debug:
     var: "web_sg"


 - name: WebServer | Tag the WEB Security Group with a name
   local_action:
     module: ec2_tag
     resource: "{{ web_sg.group_id }}"
     region: "{{ vpc_region }}"
     state: present
     tags:
       Name: "{{ vpc_name }}-{{ web_sg.group_name }}"


 - name: WebServer | find ami
   ec2_ami_find:
     name: "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"
     owner: 099720109477
     virtualization_type: "{{ virutalization_type }}"
     sort: name
     sort_order: descending
     sort_end: 1
     region: "{{ vpc_region }}"
   register: image_id 

 - debug:
     var: "image_id"


 - name: WebServer | Create the WebServer Instance(s)
   local_action:
     module: ec2
     region: "{{ vpc_region }}"
     group: "{{ web_security_groups[0].sg_name }}"
     keypair: "{{ key_name }}"
     instance_type: "{{ web_instance_type }}"
     image: "{{ image_id.results[0].ami_id }}"
     vpc_subnet_id: "{{ item }}"
     assign_public_ip: True
     wait: True
     wait_timeout: 600
     user_data: |
               #!/bin/sh
               sudo apt-get install nginx -y
     instance_tags:
       Name: "{{ vpc_name }}_WEB_Instance"
       Environment: "{{ ENV }}"
       Role: "{{ server_role }}"
       Application: "{{ application }}"
   with_items:
      - "{{ public_subnet_1 }}"
      - "{{ public_subnet_2 }}"
   register: web


 - name: WebServer | Set the Instances facts
   set_fact:
     instance_public_ip_1: "{{ web.results[0].instances[0].public_ip }}"
     instance_id_1: "{{ web.results[0].instances[0].id }}"
     instance_public_ip_2: "{{ web.results[1].instances[0].public_ip }}"
     instance_id_2: "{{ web.results[1].instances[0].id }}"

 - debug:
     var: "instance_public_ip_1"

 - debug:
     var: "instance_public_ip_2"


 - name: WebServer | Add the newly created EC2 instance(s) to the local host group (located inside the directory)
   local_action:
     module: lineinfile
     dest: "./hosts"
     regexp: "{{ item }}"
     insertafter: "[webserver]"
     line: "{{ item }}"
   with_items:
      - "{{ instance_public_ip_1 }}"
      - "{{ instance_public_ip_2 }}"


 - name: WebServer | Wait for SSH to come up
   local_action:
     module: wait_for
     host: "{{ item }}"
     port: 22
     state: started
   with_items:
     - "{{ instance_public_ip_1 }}"
     - "{{ instance_public_ip_2 }}"

 - name: Create SSH Group to login dynamically to EC2 Instance(s)
   add_host:
     hostname: "{{ item }}"
     groupname: webserver
   with_items:
     - "{{ instance_public_ip_1 }}"
     - "{{ instance_public_ip_2 }}"


